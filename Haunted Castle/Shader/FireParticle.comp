#version 430 core

layout(local_size_x=16,
	local_size_y=16,
	local_size_z=1) in;

layout(std430, binding = 0) buffer Pos1
{
	vec4 Position_In[];
};
layout(std430, binding = 1) buffer Vel1
{
	vec4 Velocity_In[];
};
layout(std430, binding = 2) buffer Pos2
{
	vec4 Position_Out[];
};
layout(std430, binding = 3) buffer Vel2
{
	vec4 Velocity_Out[];
};

// current particle count (atomic counter)
layout (binding = 4, offset = 0) uniform atomic_uint Count;

uniform uint LastCount;
uniform uint MaximumCount;
uniform float DeltaT;

uniform uint spawnCount;

const vec3 GRAVITY = vec3(0, 0.01f, 0);

void addParticleToOutputList(vec3 pos, vec3 vel, float TTL) {
	// increment the atomic counter and use its previous value:
	
	uint nr = atomicCounterIncrement(Count);
	if (nr >= MaximumCount) {
		// we are out of memory
		atomicCounterDecrement(Count);
		return;
	}
	
	Position_Out[nr] = vec4(pos, TTL);
	Velocity_Out[nr] = vec4(vel, 0);
}

void main(void)
{
	// unique one-dimensional index:
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	if(idx >= LastCount) return;
	
	vec3 forces = GRAVITY;
	forces += vec3(-0.001f, 0, 0); // add wind or other forces
	vec3 velocity = Velocity_In[idx].xyz;// + DeltaT * forces;
	vec3 pos = Position_In[idx].xyz + vec3(0, 0.1, 0);// + DeltaT * velocity;
	float TTL = Position_In[idx].w - DeltaT;

	if (TTL > 0) { // particle‘s still alive
		addParticleToOutputList(pos, velocity, TTL);
	}

	if(idx == 0 && spawnCount > 0)
	{
		addParticleToOutputList(vec3(0, 0, 0), vec3(0, 0, 0), 1);
	}
}